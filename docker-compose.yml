version: "3.7"

volumes:
  postgres_data:

services:
  postgres:
    image: postgres:13-alpine
    volumes:
      # We'll store the postgres data in the 'postgres_data' volume we defined:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - ${ARROW_CHALLENGE_PG_PORT:-5432}:5432
    environment:
      POSTGRES_PASSWORD: 3x4mpl3P455w0rd

  chrome:
    image: browserless/chrome:1.43-chrome-stable
    ports:
      - "3333:3333"
    # Mount application source code to support file uploading
    # (otherwise Chrome won't be able to find files).
    # NOTE: Make sure you use absolute paths in `#attach_file`.
    volumes:
      - .:${PWD:-/srv/arrow-challenge}:cached
    environment:
      # By default, it uses 3000, which is typically used by Rails.
      PORT: 3333
      # Set connection timeout to avoid timeout exception during debugging
      # https://docs.browserless.io/docs/docker.html#connection-timeout
      CONNECTION_TIMEOUT: 600000

  # Where are the rest of the app services? (i.e. test, worker, web, etc)
  #
  # We've separated the app services from the rest of the services to streamline
  # the CI/CD pipeline execution. You'll find the app service definitions on the
  # `docker-compose.override.yml` file.
  #
  # You don't have to do anything special to docker-compose or plis to make the
  # project work as usual. By default, `docker-compose` will read
  # `docker-compose.yml` and `docker-compose.override.yml` files, merging their
  # contents before doing any actual work.
  #
  # See https://docs.docker.com/compose/extends/#understanding-multiple-compose-files
